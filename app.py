# app.py - Versi√≥n Producci√≥n Limpia para WhatsApp Business API
import os
import re
import logging
from datetime import datetime, timedelta
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from openai import OpenAI
import requests

# Importar m√≥dulos personalizados
from guardar_datos_google_sheets import guardar_datos, verificar_usuario
from calendar_service import agendar_en_calendar, formatear_fecha_amigable
from registro_agendamiento import (
    registrar_agendamiento_completo, 
    registrar_rechazo_asesoria,
    verificar_estado_asesoria_usuario
)
from scraper import extraer_contenido_web

# Configurar logging para producci√≥n
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('chatbot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Cargar variables de entorno
load_dotenv()

# Inicializar Flask
app = Flask(__name__)

# Configuraci√≥n de APIs
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WHATSAPP_VERIFY_TOKEN = os.getenv("WHATSAPP_VERIFY_TOKEN")
WHATSAPP_ACCESS_TOKEN = os.getenv("WHATSAPP_ACCESS_TOKEN")
WHATSAPP_PHONE_NUMBER_ID = os.getenv("WHATSAPP_PHONE_NUMBER_ID")

# CONFIGURACI√ìN DE EMPRESA - PERSONALIZAR AQU√ç
EMPRESA_CONFIG = {
    "nombre": "ITELSA IA",  # CAMBIAR: Nombre de tu empresa
    "url_website": "https://itelsaia.com",  # CAMBIAR: URL de tu website
    "horario_atencion": "lunes a viernes de 8:00am a 5:00pm",  # CAMBIAR: Tu horario
    "telefono_soporte": "+57 300 123 4567",  # CAMBIAR: Tu tel√©fono
    "email_soporte": "soporte@itelsaia.com"  # CAMBIAR: Tu email
}

# Inicializar OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# Almacenamiento temporal de sesiones de usuario (en producci√≥n usar Redis/Database)
sesiones_usuarios = {}

class GestorSesion:
    """Maneja las sesiones de conversaci√≥n de usuarios"""
    
    def __init__(self, telefono):
        self.telefono = telefono
        self.estado = "inicial"  # inicial, registrando, conversando, agendando
        self.datos_usuario = {}
        self.pendiente_confirmacion = {}
        self.pregunto_sobre_asesoria = False
        self.es_segunda_oportunidad = False
        self.ultimo_mensaje = datetime.now()
        
    def actualizar_actividad(self):
        self.ultimo_mensaje = datetime.now()
        
    def es_sesion_activa(self):
        """Verifica si la sesi√≥n sigue activa (√∫ltimos 30 minutos)"""
        tiempo_limite = datetime.now() - timedelta(minutes=30)
        return self.ultimo_mensaje > tiempo_limite

def obtener_sesion(telefono):
    """Obtiene o crea una sesi√≥n para un usuario"""
    if telefono not in sesiones_usuarios:
        sesiones_usuarios[telefono] = GestorSesion(telefono)
    
    sesion = sesiones_usuarios[telefono]
    
    # Limpiar sesi√≥n si es muy antigua
    if not sesion.es_sesion_activa():
        sesiones_usuarios[telefono] = GestorSesion(telefono)
    
    sesiones_usuarios[telefono].actualizar_actividad()
    return sesiones_usuarios[telefono]

def enviar_mensaje_whatsapp(telefono, mensaje):
    """
    Env√≠a mensaje por WhatsApp Business API
    PERSONALIZAR: Ajustar seg√∫n tu configuraci√≥n de WhatsApp
    """
    try:
        url = f"https://graph.facebook.com/v18.0/{WHATSAPP_PHONE_NUMBER_ID}/messages"
        
        headers = {
            "Authorization": f"Bearer {WHATSAPP_ACCESS_TOKEN}",
            "Content-Type": "application/json"
        }
        
        data = {
            "messaging_product": "whatsapp",
            "to": telefono,
            "type": "text",
            "text": {"body": mensaje}
        }
        
        response = requests.post(url, json=data, headers=headers)
        
        if response.status_code == 200:
            logger.info(f"Mensaje enviado exitosamente a {telefono}")
            return True
        else:
            logger.error(f"Error enviando mensaje: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"Error en env√≠o de WhatsApp: {str(e)}")
        return False

def es_correo_valido(correo):
    """Valida formato de correo electr√≥nico"""
    patron = r'^[\w\.-]+@[\w\.-]+\.\w{2,4}$'
    return re.match(patron, correo) is not None

def extraer_fecha_hora(texto):
    """Extrae fecha y hora del texto del usuario"""
    ahora = datetime.now()
    
    # PERSONALIZAR: Ajustar patrones seg√∫n tu regi√≥n/idioma
    patrones_fecha_hora = [
        r'para (ma√±ana|hoy|pasado ma√±ana) a las (\d{1,2}(?::\d{2})?)(am|pm)',
        r'(ma√±ana|hoy|pasado ma√±ana) a las (\d{1,2}(?::\d{2})?)(am|pm)',
        r'las (\d{1,2}(?::\d{2})?)(am|pm) (ma√±ana|hoy|pasado ma√±ana)',
        r'(\d{4}-\d{2}-\d{2}) (\d{1,2}):(\d{2})'
    ]
    
    for i, patron in enumerate(patrones_fecha_hora):
        match = re.search(patron, texto.lower())
        if match:
            try:
                if i == 3:  # Formato fecha completa
                    fecha = datetime.strptime(match.group(1), "%Y-%m-%d")
                    hora = f"{match.group(2)}:{match.group(3)}"
                    return fecha.strftime("%Y-%m-%d"), hora
                
                # Procesar d√≠as relativos
                if i in [0, 1]:
                    dia = match.group(1)
                    hora_texto = match.group(2)
                    am_pm = match.group(3)
                else:
                    hora_texto = match.group(1)
                    am_pm = match.group(2)
                    dia = match.group(3)
                
                # Calcular fecha
                if dia == "ma√±ana":
                    fecha = ahora + timedelta(days=1)
                elif dia == "hoy":
                    fecha = ahora
                elif dia == "pasado ma√±ana":
                    fecha = ahora + timedelta(days=2)
                
                # Formatear hora
                if ":" not in hora_texto:
                    hora_completa = f"{hora_texto}:00{am_pm}"
                else:
                    hora_completa = f"{hora_texto}{am_pm}"
                
                return fecha.strftime("%Y-%m-%d"), hora_completa
                
            except Exception:
                continue
    
    return None, None

def detectar_seleccion_opcion(texto, horarios_disponibles):
    """Detecta si el usuario seleccion√≥ una opci√≥n de horario"""
    texto_lower = texto.lower()
    
    patrones_seleccion = [
        r'opci[√≥o]n\s*(\d+)',
        r'la\s*(\d+)',
        r'el\s*(\d+)',
        r'n[√∫u]mero\s*(\d+)',
        r'^(\d+)$'
    ]
    
    for patron in patrones_seleccion:
        match = re.search(patron, texto_lower)
        if match:
            try:
                numero = int(match.group(1))
                if 1 <= numero <= len(horarios_disponibles):
                    return horarios_disponibles[numero - 1]
            except (ValueError, IndexError):
                continue
    
    # Respuestas afirmativas para una sola opci√≥n
    if any(palabra in texto_lower for palabra in ['s√≠', 'si', 'ok', 'est√° bien', 'perfecto']):
        if len(horarios_disponibles) == 1:
            return horarios_disponibles[0]
    
    return None

def detectar_solicitud_agendamiento(texto):
    """Detecta si el usuario quiere agendar una cita"""
    texto_lower = texto.lower().strip()
    
    # PERSONALIZAR: Ajustar frases seg√∫n tu contexto de negocio
    frases_agendamiento = [
        'quiero agendar', 'me gustar√≠a agendar', 'necesito agendar',
        'quiero una cita', 'necesito una cita', 'quisiera una cita',
        'quiero programar', 'puedo agendar', 'agendar una cita',
        'quiero m√°s asesor√≠a', 'otra asesor√≠a', 'nueva asesor√≠a',
        's√≠ quiero', 'claro que s√≠', 'acepto', 'me interesa'
    ]
    
    return any(frase in texto_lower for frase in frases_agendamiento)

def detectar_rechazo_asesoria(texto):
    """Detecta si el usuario rechaza la asesor√≠a"""
    texto_lower = texto.lower().strip()
    
    if texto_lower in ['no', 'nope', 'nah', 'no gracias']:
        return True
    
    frases_rechazo = [
        'no quiero agendar', 'no me interesa', 'no estoy interesado',
        'no tengo tiempo', 'no puedo', 'ahora no', 'despu√©s',
        'no quiero', 'no necesito', 'tal vez despu√©s', 'mejor no'
    ]
    
    return any(frase in texto_lower for frase in frases_rechazo)

def generar_mensaje_agendamiento(resultado, fecha, hora, sesion):
    """Genera mensaje amigable para resultado de agendamiento"""
    if resultado['disponible']:
        fecha_amigable = formatear_fecha_amigable(fecha)
        
        # Determinar tipo de asesor√≠a
        if sesion.es_segunda_oportunidad:
            observaciones = f"Asesor√≠a gratuita - Segunda oportunidad"
        elif sesion.datos_usuario.get('es_nuevo', False):
            observaciones = f"Asesor√≠a gratuita - Usuario nuevo"
        else:
            observaciones = f"Asesor√≠a programada"
        
        # Registrar en base de datos
        correo = sesion.datos_usuario.get('correo')
        if correo:
            registrar_agendamiento_completo(correo, fecha, hora, observaciones)
        
        return (f"¬°Perfecto! ‚úÖ Tu cita ha sido agendada para el {fecha_amigable} a las {hora}.\n\n"
                f"Recibir√°s confirmaci√≥n por correo electr√≥nico.\n\n"
                f"¬øHay algo m√°s en lo que pueda ayudarte?")
    
    # Manejar diferentes motivos de no disponibilidad
    motivo = resultado['motivo']
    fecha_amigable = formatear_fecha_amigable(fecha)
    
    if motivo == 'fuera_horario_laboral':
        mensaje = f"Nuestro horario es {EMPRESA_CONFIG['horario_atencion']}. üòä\n\n"
        if resultado['horarios_alternativos']:
            mensaje += f"Horarios disponibles para el {fecha_amigable}:\n"
            for i, horario in enumerate(resultado['horarios_alternativos'], 1):
                mensaje += f"{i}. {horario}\n"
            mensaje += "\n¬øCu√°l prefieres? Solo env√≠a el n√∫mero."
            
            # Guardar opciones en sesi√≥n
            sesion.pendiente_confirmacion[fecha_amigable] = {
                'fecha': fecha,
                'horarios': resultado['horarios_alternativos']
            }
        return mensaje
    
    elif motivo == 'fin_semana':
        fecha_alt = resultado.get('fecha_alternativa', fecha)
        fecha_amigable_alt = formatear_fecha_amigable(fecha_alt)
        mensaje = f"No atendemos fines de semana, pero el {fecha_amigable_alt} s√≠. üìÖ\n\n"
        if resultado['horarios_alternativos']:
            mensaje += f"Horarios disponibles:\n"
            for i, horario in enumerate(resultado['horarios_alternativos'], 1):
                mensaje += f"{i}. {horario}\n"
            mensaje += "\n¬øTe parece bien alguno? Env√≠a el n√∫mero."
            
            sesion.pendiente_confirmacion[fecha_amigable_alt] = {
                'fecha': fecha_alt,
                'horarios': resultado['horarios_alternativos']
            }
        return mensaje
    
    elif motivo == 'horario_ocupado':
        mensaje = f"Ese horario est√° ocupado para el {fecha_amigable}. üïê\n\n"
        if resultado['horarios_alternativos']:
            mensaje += f"Otras opciones disponibles:\n"
            for i, horario in enumerate(resultado['horarios_alternativos'], 1):
                mensaje += f"{i}. {horario}\n"
            mensaje += "\n¬øCu√°l prefieres? Env√≠a el n√∫mero."
            
            sesion.pendiente_confirmacion[fecha_amigable] = {
                'fecha': fecha,
                'horarios': resultado['horarios_alternativos']
            }
        return mensaje
    
    return "Hubo un inconveniente. ¬øPodr√≠as intentar con otro horario? üòä"

def procesar_mensaje_usuario(telefono, mensaje):
    """
    Funci√≥n principal que procesa mensajes de usuario
    PERSONALIZAR: Aqu√≠ puedes ajustar la l√≥gica de negocio
    """
    try:
        sesion = obtener_sesion(telefono)
        mensaje_limpio = mensaje.strip()
        
        # Comando para reiniciar conversaci√≥n
        if mensaje_limpio.lower() in ['reiniciar', 'empezar', 'start', 'hola']:
            sesion.estado = "inicial"
            sesion.datos_usuario = {}
            sesion.pendiente_confirmacion = {}
            
            return (f"¬°Hola! üëã Soy el asistente de {EMPRESA_CONFIG['nombre']}.\n\n"
                   f"Para ayudarte mejor, ¬øpodr√≠as compartir tu correo electr√≥nico?")
        
        # Estado inicial - solicitar correo
        if sesion.estado == "inicial":
            if not es_correo_valido(mensaje_limpio):
                return "Por favor, ingresa un correo electr√≥nico v√°lido. üìß"
            
            # Verificar si es usuario existente
            nombre_encontrado = verificar_usuario(mensaje_limpio)
            
            if nombre_encontrado:
                estado_asesoria = verificar_estado_asesoria_usuario(mensaje_limpio)
                
                sesion.datos_usuario = {
                    'nombre': nombre_encontrado,
                    'correo': mensaje_limpio,
                    'es_nuevo': False
                }
                
                # Usuario con rechazo previo (segunda oportunidad)
                if estado_asesoria['tiene_rechazo'] and not estado_asesoria['tiene_cita_exitosa']:
                    sesion.es_segunda_oportunidad = True
                    sesion.estado = "conversando"
                    
                    return (f"¬°Hola de nuevo, {nombre_encontrado}! üëã\n\n"
                           f"Veo que a√∫n no has aprovechado tu asesor√≠a gratuita. "
                           f"¬øTe gustar√≠a programarla ahora? Es una excelente oportunidad "
                           f"para ayudarte con tus necesidades espec√≠ficas. üöÄ\n\n"
                           f"¬øCu√°ndo te vendr√≠a bien?")
                
                # Usuario existente normal
                else:
                    sesion.estado = "conversando" 
                    return (f"¬°Hola {nombre_encontrado}! üòä\n\n"
                           f"Es un placer tenerte de vuelta. ¬øEn qu√© puedo ayudarte hoy?")
            
            # Usuario nuevo - solicitar datos
            else:
                sesion.estado = "registrando"
                sesion.datos_usuario['correo'] = mensaje_limpio
                return (f"¬°Bienvenido a {EMPRESA_CONFIG['nombre']}! ‚ú®\n\n"
                       f"Eres nuevo aqu√≠. ¬øCu√°l es tu nombre completo?")
        
        # Estado registrando - recolectar datos
        elif sesion.estado == "registrando":
            if 'nombre' not in sesion.datos_usuario:
                sesion.datos_usuario['nombre'] = mensaje_limpio
                return "¬øCu√°l es tu n√∫mero de tel√©fono? üì±"
            
            elif 'telefono' not in sesion.datos_usuario:
                sesion.datos_usuario['telefono'] = mensaje_limpio
                return f"¬øQu√© servicio de {EMPRESA_CONFIG['nombre']} te interesa? üíº"
            
            elif 'servicio' not in sesion.datos_usuario:
                sesion.datos_usuario['servicio'] = mensaje_limpio
                return "¬øDeseas dejar alg√∫n comentario adicional? (o escribe 'ninguno') üìù"
            
            elif 'comentario' not in sesion.datos_usuario:
                sesion.datos_usuario['comentario'] = mensaje_limpio if mensaje_limpio.lower() != 'ninguno' else ""
                
                # Confirmar datos
                datos = sesion.datos_usuario
                confirmacion = (f"Confirma tus datos:\n\n"
                               f"üë§ Nombre: {datos['nombre']}\n"
                               f"üìß Correo: {datos['correo']}\n"
                               f"üì± Tel√©fono: {datos['telefono']}\n"
                               f"üíº Servicio: {datos['servicio']}\n"
                               f"üìù Comentario: {datos['comentario']}\n\n"
                               f"¬øSon correctos? (s√≠/no)")
                
                sesion.estado = "confirmando_datos"
                return confirmacion
        
        # Estado confirmando datos
        elif sesion.estado == "confirmando_datos":
            if mensaje_limpio.lower() in ['s√≠', 'si', 's', 'yes', 'correcto']:
                # Guardar en base de datos
                datos = sesion.datos_usuario
                resultado = guardar_datos(
                    datos['nombre'], datos['correo'], datos['telefono'],
                    datos['servicio'], datos['comentario']
                )
                
                if resultado:
                    sesion.datos_usuario['es_nuevo'] = True
                    sesion.estado = "conversando"
                    
                    return (f"¬°Excelente! ‚úÖ Tu cuenta ha sido creada.\n\n"
                           f"Cu√©ntame: ¬øqu√© aspecto espec√≠fico de nuestros servicios te interesa m√°s? "
                           f"¬øAutomatizaci√≥n, an√°lisis de datos, chatbots o consultor√≠a estrat√©gica? ü§ñ")
                else:
                    return "Hubo un error al guardar tus datos. Por favor, int√©ntalo nuevamente."
            
            elif mensaje_limpio.lower() in ['no', 'n', 'incorrecto']:
                sesion.estado = "inicial"
                sesion.datos_usuario = {}
                return "Entendido. Volvamos a empezar. ¬øCu√°l es tu correo electr√≥nico?"
            
            else:
                return "Por favor, responde 's√≠' o 'no' para confirmar tus datos."
        
        # Estado conversando - chatbot principal
        elif sesion.estado == "conversando":
            return procesar_conversacion_principal(sesion, mensaje_limpio)
        
        else:
            # Estado no v√°lido, reiniciar
            sesion.estado = "inicial"
            return "Algo sali√≥ mal. Empecemos de nuevo. ¬øCu√°l es tu correo electr√≥nico?"
    
    except Exception as e:
        logger.error(f"Error procesando mensaje: {str(e)}")
        return "Disculpa, tuve un problema t√©cnico. ¬øPuedes intentar nuevamente?"

def procesar_conversacion_principal(sesion, mensaje):
    """
    Procesa la conversaci√≥n principal con IA
    PERSONALIZAR: Ajustar prompts y l√≥gica seg√∫n tu negocio
    """
    try:
        # Verificar agendamiento pendiente
        if sesion.pendiente_confirmacion:
            for fecha_amigable, datos in sesion.pendiente_confirmacion.items():
                hora_seleccionada = detectar_seleccion_opcion(mensaje, datos['horarios'])
                if hora_seleccionada:
                    # Procesar agendamiento
                    resultado = agendar_en_calendar(
                        sesion.datos_usuario['nombre'],
                        sesion.datos_usuario['correo'],
                        sesion.datos_usuario.get('telefono', ''),
                        datos['fecha'],
                        hora_seleccionada
                    )
                    
                    sesion.pendiente_confirmacion = {}
                    return generar_mensaje_agendamiento(resultado, datos['fecha'], hora_seleccionada, sesion)
        
        # Verificar solicitud de agendamiento directo
        fecha, hora = extraer_fecha_hora(mensaje)
        if fecha and hora:
            resultado = agendar_en_calendar(
                sesion.datos_usuario['nombre'],
                sesion.datos_usuario['correo'],
                sesion.datos_usuario.get('telefono', ''),
                fecha,
                hora
            )
            return generar_mensaje_agendamiento(resultado, fecha, hora, sesion)
        
        # Detectar solicitud de agendamiento
        if detectar_solicitud_agendamiento(mensaje):
            if sesion.es_segunda_oportunidad:
                return (f"¬°Excelente decisi√≥n! üåü\n\n"
                       f"¬øCu√°l ser√≠a tu fecha y hora preferida? "
                       f"Nuestro horario es {EMPRESA_CONFIG['horario_atencion']}.")
            else:
                return (f"¬°Perfecto! üéâ\n\n"
                       f"¬øCu√°l ser√≠a tu fecha y hora preferida? "
                       f"Nuestro horario es {EMPRESA_CONFIG['horario_atencion']}.")
        
        # Detectar rechazo de asesor√≠a
        if detectar_rechazo_asesoria(mensaje):
            if sesion.datos_usuario.get('es_nuevo', False):
                registrar_rechazo_asesoria(
                    sesion.datos_usuario['correo'],
                    "Usuario nuevo rechaz√≥ asesor√≠a gratuita"
                )
            
            return ("Entiendo perfectamente. La oferta seguir√° disponible cuando est√©s listo. "
                   "¬°Que tengas un excelente d√≠a! üòä")
        
        # Procesar con IA
        return generar_respuesta_ia(sesion, mensaje)
    
    except Exception as e:
        logger.error(f"Error en conversaci√≥n principal: {str(e)}")
        return "Disculpa, tuve un problema. ¬øPuedes repetir tu mensaje?"

def generar_respuesta_ia(sesion, mensaje):
    """
    Genera respuesta usando OpenAI
    PERSONALIZAR: Ajustar prompt seg√∫n tu empresa y servicios
    """
    try:
        # Cargar contenido de la empresa
        contenido_web = extraer_contenido_web(EMPRESA_CONFIG['url_website']) or ""
        
        try:
            with open("contenido_fijo.txt", "r", encoding="utf-8") as file:
                contenido_manual = file.read()
        except FileNotFoundError:
            contenido_manual = f"Informaci√≥n de {EMPRESA_CONFIG['nombre']}: Empresa de servicios de IA."
        
        contexto_completo = contenido_manual + "\n\n" + contenido_web
        
        # Configurar prompt seg√∫n tipo de usuario
        nombre_usuario = sesion.datos_usuario.get('nombre', 'Usuario')
        es_nuevo = sesion.datos_usuario.get('es_nuevo', False)
        
        if sesion.es_segunda_oportunidad:
            prompt_sistema = (
                f"Eres un asistente de {EMPRESA_CONFIG['nombre']}. {nombre_usuario} rechaz√≥ "
                f"previamente su asesor√≠a gratuita pero regres√≥. Tu misi√≥n es conseguir que agende AHORA.\n\n"
                f"ESTRATEGIA:\n"
                f"- S√© c√°lido pero directo\n"
                f"- Enf√≥cate en los beneficios de la asesor√≠a GRATUITA\n"
                f"- Si muestra inter√©s, facilita inmediatamente el agendamiento\n"
                f"- Pregunta sobre fecha y hora si dice que s√≠\n\n"
                f"INFORMACI√ìN DE LA EMPRESA:\n{contexto_completo}"
            )
        elif es_nuevo:
            prompt_sistema = (
                f"Eres un asistente de ventas de {EMPRESA_CONFIG['nombre']}. {nombre_usuario} es "
                f"COMPLETAMENTE NUEVO y tu misi√≥n es que agende su primera asesor√≠a GRATUITA.\n\n"
                f"REGLAS:\n"
                f"- Responde amablemente a sus preguntas\n"
                f"- DESPU√âS de cada respuesta, pregunta sobre agendar\n"
                f"- Enfoca los beneficios en la asesor√≠a GRATUITA\n"
                f"- Si dice NO, respeta pero insiste gentilmente\n\n"
                f"INFORMACI√ìN DE LA EMPRESA:\n{contexto_completo}"
            )
        else:
            prompt_sistema = (
                f"Eres un asistente de {EMPRESA_CONFIG['nombre']} hablando con {nombre_usuario}, "
                f"un cliente registrado.\n\n"
                f"OBJETIVOS:\n"
                f"- Brindar excelente soporte\n"
                f"- Resolver dudas t√©cnicas\n"
                f"- Ser c√°lido y profesional\n"
                f"- Solo agendar si √©l lo solicita expresamente\n\n"
                f"INFORMACI√ìN DE LA EMPRESA:\n{contexto_completo}"
            )
        
        # Generar respuesta con OpenAI
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": prompt_sistema},
                {"role": "user", "content": mensaje}
            ],
            temperature=0.7,
            max_tokens=300  # Limitado para WhatsApp
        )
        
        respuesta_ia = response.choices[0].message.content
        
        # Para usuarios nuevos, agregar pregunta de agendamiento si no la incluye
        if es_nuevo and not sesion.es_segunda_oportunidad:
            palabras_agendamiento = ['agendar', 'cita', 'asesor√≠a', 'reuni√≥n', 'consulta', 'gratuita']
            if not any(palabra in respuesta_ia.lower() for palabra in palabras_agendamiento):
                import random
                preguntas = [
                    "\n\n¬øTe gustar√≠a agendar tu asesor√≠a gratuita para analizar tu caso espec√≠fico?",
                    "\n\n¬øCu√°ndo podr√≠as tener 30 minutos para una consulta gratuita personalizada?",
                    "\n\n¬øTe interesa programar una reuni√≥n sin costo para revisar tu situaci√≥n?"
                ]
                respuesta_ia += random.choice(preguntas)
        
        return respuesta_ia
    
    except Exception as e:
        logger.error(f"Error generando respuesta IA: {str(e)}")
        return ("Disculpa, tuve un problema t√©cnico. ¬øPuedes repetir tu pregunta? "
               f"Tambi√©n puedes contactarnos en {EMPRESA_CONFIG['telefono_soporte']}")

# Rutas de Flask para WhatsApp Webhook
@app.route('/webhook', methods=['GET'])
def verify_webhook():
    """Verificaci√≥n del webhook de WhatsApp"""
    mode = request.args.get('hub.mode')
    token = request.args.get('hub.verify_token')
    challenge = request.args.get('hub.challenge')
    
    if mode == 'subscribe' and token == WHATSAPP_VERIFY_TOKEN:
        logger.info("Webhook verificado exitosamente")
        return challenge
    else:
        logger.warning("Fallo en verificaci√≥n de webhook")
        return 'Forbidden', 403

@app.route('/webhook', methods=['POST'])
def handle_webhook():
    """Maneja mensajes entrantes de WhatsApp"""
    try:
        data = request.get_json()
        
        # Verificar estructura del mensaje
        if (data.get('object') and 
            data.get('entry') and 
            data['entry'][0].get('changes') and
            data['entry'][0]['changes'][0].get('value') and
            data['entry'][0]['changes'][0]['value'].get('messages')):
            
            messages = data['entry'][0]['changes'][0]['value']['messages']
            
            for message in messages:
                # Procesar solo mensajes de texto
                if message.get('type') == 'text':
                    telefono = message['from']
                    texto = message['text']['body']
                    
                    logger.info(f"Mensaje recibido de {telefono}: {texto}")
                    
                    # Procesar mensaje y generar respuesta
                    respuesta = procesar_mensaje_usuario(telefono, texto)
                    
                    # Enviar respuesta por WhatsApp
                    if respuesta:
                        enviar_mensaje_whatsapp(telefono, respuesta)
                    
        return jsonify({'status': 'success'}), 200
        
    except Exception as e:
        logger.error(f"Error procesando webhook: {str(e)}")
        return jsonify({'status': 'error'}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Endpoint para verificar estado del servicio"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'service': EMPRESA_CONFIG['nombre']
    }), 200

@app.route('/stats', methods=['GET'])
def get_stats():
    """Endpoint para estad√≠sticas b√°sicas"""
    try:
        sesiones_activas = len([s for s in sesiones_usuarios.values() if s.es_sesion_activa()])
        return jsonify({
            'sesiones_activas': sesiones_activas,
            'total_sesiones': len(sesiones_usuarios),
            'timestamp': datetime.now().isoformat()
        }), 200
    except Exception as e:
        logger.error(f"Error obteniendo estad√≠sticas: {str(e)}")
        return jsonify({'error': 'Error interno'}), 500

# Funci√≥n para limpiar sesiones antiguas (ejecutar peri√≥dicamente)
def limpiar_sesiones_antiguas():
    """Limpia sesiones inactivas para liberar memoria"""
    try:
        sesiones_a_eliminar = []
        for telefono, sesion in sesiones_usuarios.items():
            if not sesion.es_sesion_activa():
                sesiones_a_eliminar.append(telefono)
        
        for telefono in sesiones_a_eliminar:
            del sesiones_usuarios[telefono]
        
        if sesiones_a_eliminar:
            logger.info(f"Eliminadas {len(sesiones_a_eliminar)} sesiones inactivas")
            
    except Exception as e:
        logger.error(f"Error limpiando sesiones: {str(e)}")

if __name__ == '__main__':
    # CONFIGURACI√ìN DE DESPLIEGUE
    # DESARROLLO: Usar debug=True, port=5000
    # PRODUCCI√ìN: Usar debug=False, port=80 o el que asigne tu hosting
    
    port = int(os.environ.get('PORT', 5000))  # Para Heroku/Railway
    app.run(host='0.0.0.0', port=port, debug=False)  # CAMBIAR: debug=False en producci√≥n