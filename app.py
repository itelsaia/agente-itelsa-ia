# app.py - Versi√≥n Producci√≥n para Render
import os
import json
import re
from datetime import datetime, timedelta
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from openai import OpenAI

# Importar m√≥dulos locales
from guardar_datos_google_sheets import guardar_datos, verificar_usuario
from calendar_service import agendar_en_calendar, formatear_fecha_amigable
from registro_agendamiento import (
    registrar_agendamiento_completo,
    registrar_rechazo_asesoria,
    verificar_estado_asesoria_usuario
)
from scraper import extraer_contenido_web

# Cargar variables de entorno
load_dotenv()

app = Flask(__name__)

# Configuraci√≥n
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
WHATSAPP_VERIFY_TOKEN = os.getenv("WHATSAPP_VERIFY_TOKEN")
WHATSAPP_ACCESS_TOKEN = os.getenv("WHATSAPP_ACCESS_TOKEN")
WHATSAPP_PHONE_NUMBER_ID = os.getenv("WHATSAPP_PHONE_NUMBER_ID")

# Variables globales para sesiones de usuario
user_sessions = {}

def es_correo_valido(correo):
    patron = r'^[\w\.-]+@[\w\.-]+\.\w{2,4}$'
    return re.match(patron, correo)

def extraer_fecha_hora(texto):
    ahora = datetime.now()
    
    patrones_fecha_hora = [
        r'para (ma√±ana|hoy|pasado ma√±ana) a las (\d{1,2}(?::\d{2})?)(am|pm)',
        r'(ma√±ana|hoy|pasado ma√±ana) a las (\d{1,2}(?::\d{2})?)(am|pm)',
        r'las (\d{1,2}(?::\d{2})?)(am|pm) (ma√±ana|hoy|pasado ma√±ana)',
        r'(\d{4}-\d{2}-\d{2}) (\d{1,2}):(\d{2})'
    ]
    
    for i, patron in enumerate(patrones_fecha_hora):
        match = re.search(patron, texto.lower())
        if match:
            if i == 3:
                fecha = datetime.strptime(match.group(1), "%Y-%m-%d")
                hora = f"{match.group(2)}:{match.group(3)}"
                fecha_str = fecha.strftime("%Y-%m-%d")
                return fecha_str, hora
            
            if i in [0, 1]:
                dia = match.group(1)
                hora_texto = match.group(2)
                am_pm = match.group(3)
            else:
                hora_texto = match.group(1)
                am_pm = match.group(2)
                dia = match.group(3)
            
            if dia == "ma√±ana":
                fecha = ahora + timedelta(days=1)
            elif dia == "hoy":
                fecha = ahora
            elif dia == "pasado ma√±ana":
                fecha = ahora + timedelta(days=2)
            
            if ":" not in hora_texto:
                hora_completa = f"{hora_texto}:00{am_pm}"
            else:
                hora_completa = f"{hora_texto}{am_pm}"
            
            fecha_str = fecha.strftime("%Y-%m-%d")
            return fecha_str, hora_completa
    
    return None, None

def detectar_solicitud_agendamiento(texto):
    texto_lower = texto.lower().strip()
    
    frases_agendamiento = [
        'quiero agendar', 'me gustar√≠a agendar', 'quisiera agendar', 'necesito agendar',
        'quiero una cita', 'necesito una cita', 'me gustar√≠a una cita', 'quisiera una cita',
        'quiero programar', 'puedo agendar', 'es posible agendar', 'agendar una cita',
        'agendar cita', 'programar cita', 'reservar cita', 'solicitar cita',
        'quiero m√°s asesor√≠a', 'otra asesor√≠a', 'nueva asesor√≠a', 'segunda asesor√≠a',
        'quiero reuni√≥n', 'solicitar reuni√≥n', 'programar reuni√≥n',
        's√≠ quiero', 'claro que s√≠', 'acepto', 'me interesa', 'por favor'
    ]
    
    for frase in frases_agendamiento:
        if frase in texto_lower:
            return True
    
    return False

def detectar_rechazo_asesoria(texto):
    texto_lower = texto.lower().strip()
    
    if texto_lower in ['no', 'nope', 'nah', 'no gracias']:
        return True
    
    frases_rechazo = [
        'no quiero agendar', 'no me interesa', 'no gracias', 'no estoy interesado',
        'no tengo tiempo', 'no puedo', 'ahora no', 'despu√©s', 'm√°s tarde',
        'no quiero', 'no necesito', 'tal vez despu√©s', 'en otro momento',
        'no me convence', 'no por ahora', 'prefiero no', 'no es para m√≠',
        'no deseo', 'no me parece', 'mejor no', 'no creo',
        'otro d√≠a', 'otro momento', 'mejor despu√©s', 'quiz√°s despu√©s'
    ]
    
    for frase in frases_rechazo:
        if frase in texto_lower:
            return True
    
    if 'no' in texto_lower and any(palabra in texto_lower for palabra in ['agendar', 'cita', 'asesor√≠a', 'reuni√≥n']):
        return True
    
    return False

def generar_mensaje_amigable(resultado, fecha, hora, nombre_usuario, es_segunda_oportunidad, es_usuario_nuevo, correo):
    if resultado['disponible']:
        fecha_amigable = formatear_fecha_amigable(fecha)
        
        if es_segunda_oportunidad:
            observaciones = "Asesor√≠a gratuita agendada con √©xito - Segunda oportunidad (usuario cambi√≥ de opini√≥n)"
        elif es_usuario_nuevo:
            observaciones = "Asesor√≠a gratuita agendada con √©xito - Usuario nuevo"
        else:
            observaciones = "Asesor√≠a agendada - Usuario existente"
        
        if correo:
            registrar_agendamiento_completo(correo, fecha, hora, observaciones)
        
        return f"¬°Perfecto! ‚úÖ Tu cita ha sido agendada exitosamente para el {fecha_amigable} a las {hora}. Recibir√°s una confirmaci√≥n en tu correo electr√≥nico.\n\n¬øHay algo m√°s en lo que pueda ayudarte sobre nuestros servicios de inteligencia artificial? ¬øO tienes alguna pregunta sobre tu pr√≥xima asesor√≠a?"
    
    motivo = resultado['motivo']
    
    if motivo == 'fuera_horario_laboral':
        mensaje = f"Entiendo que prefieres esa hora, pero nuestro horario de atenci√≥n es de lunes a viernes de 8:00am a 5:00pm. üòä\n\n"
        if resultado['horarios_alternativos']:
            fecha_amigable = formatear_fecha_amigable(fecha)
            mensaje += f"Te propongo algunos horarios disponibles para el {fecha_amigable}:\n"
            for i, horario in enumerate(resultado['horarios_alternativos'], 1):
                mensaje += f"   {i}. {horario}\n"
            mensaje += "\n¬øAlguno de estos horarios te conviene mejor? Solo dime el n√∫mero de la opci√≥n que prefieras."
        else:
            mensaje += "Por favor, el√≠genos otro horario dentro de nuestro horario de atenci√≥n. ¬°Estaremos encantados de atenderte!"
        return mensaje
    
    elif motivo == 'fin_semana':
        fecha_alt = resultado.get('fecha_alternativa', fecha)
        fecha_amigable = formatear_fecha_amigable(fecha_alt)
        mensaje = f"Los fines de semana no tenemos atenci√≥n, pero estaremos listos para ti el {fecha_amigable}. üìÖ\n\n"
        if resultado['horarios_alternativos']:
            mensaje += f"Aqu√≠ tienes algunos horarios disponibles para ese d√≠a:\n"
            for i, horario in enumerate(resultado['horarios_alternativos'], 1):
                mensaje += f"   {i}. {horario}\n"
            mensaje += "\n¬øTe parece bien alguno de estos horarios? Solo dime el n√∫mero."
        return mensaje
    
    elif motivo == 'horario_ocupado':
        fecha_amigable = formatear_fecha_amigable(fecha)
        mensaje = f"Ese horario ya est√° ocupado para el {fecha_amigable}, pero tengo otras opciones disponibles: üïê\n\n"
        if resultado['horarios_alternativos']:
            for i, horario in enumerate(resultado['horarios_alternativos'], 1):
                mensaje += f"   {i}. {horario}\n"
            mensaje += "\n¬øCu√°l prefieres? Solo dime el n√∫mero de la opci√≥n."
        else:
            mensaje += "Por favor, el√≠genos otro horario y verificar√© la disponibilidad inmediatamente."
        return mensaje
    
    else:
        return "Ups, parece que hubo un peque√±o inconveniente. ¬øPodr√≠as intentar con otro horario? Estoy aqu√≠ para ayudarte a encontrar la cita perfecta. üòä"

def enviar_mensaje_whatsapp(numero_telefono, mensaje):
    """Env√≠a un mensaje por WhatsApp usando la API de Meta"""
    url = f"https://graph.facebook.com/v17.0/{WHATSAPP_PHONE_NUMBER_ID}/messages"
    
    headers = {
        "Authorization": f"Bearer {WHATSAPP_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    
    data = {
        "messaging_product": "whatsapp",
        "to": numero_telefono,
        "type": "text",
        "text": {"body": mensaje}
    }
    
    try:
        import requests
        response = requests.post(url, headers=headers, json=data)
        return response.status_code == 200
    except Exception as e:
        print(f"Error enviando mensaje WhatsApp: {e}")
        return False

def procesar_conversacion_llm(mensaje_usuario, session_data):
    """Procesa la conversaci√≥n usando OpenAI"""
    try:
        # Obtener contexto de la empresa
        url_cliente = "https://itelsaia.com"
        contenido_web = extraer_contenido_web(url_cliente) or ""
        
        try:
            with open("contenido_fijo.txt", "r", encoding="utf-8") as file:
                contenido_manual = file.read()
        except FileNotFoundError:
            contenido_manual = "No hay contenido manual cargado."
        
        contexto_completo = contenido_manual + "\n\n" + contenido_web
        
        # Configurar prompt seg√∫n el tipo de usuario
        es_segunda_oportunidad = session_data.get('es_segunda_oportunidad', False)
        es_usuario_nuevo = session_data.get('es_nuevo', False)
        nombre_usuario = session_data.get('nombre', 'Usuario')
        
        if es_segunda_oportunidad:
            prompt_sistema = (
                f"Eres un asistente amigable pero directo de ITELSA IA. {nombre_usuario} es un usuario registrado que anteriormente "
                f"rechaz√≥ su asesor√≠a gratuita, pero ha regresado. Tu MISI√ìN es conseguir que agende la asesor√≠a AHORA.\n\n"
                f"ESTRATEGIA DIRECTA:\n"
                f"1. S√© c√°lido pero directo - pregunta inmediatamente sobre agendar\n"
                f"2. Enf√≥cate en los beneficios de la asesor√≠a GRATUITA\n"
                f"3. Si muestra cualquier se√±al de inter√©s, facilita inmediatamente el agendamiento\n"
                f"4. Si dice 's√≠' o muestra inter√©s, ve directo a solicitar fecha y hora\n"
                f"5. No hagas preguntas generales sobre necesidades, ve directo al agendamiento\n\n"
                f"CONTEXTO DE SERVICIOS:\n{contexto_completo}"
            )
        elif es_usuario_nuevo:
            prompt_sistema = (
                f"Eres un asistente de ventas experto de ITELSA IA. {nombre_usuario} es un usuario COMPLETAMENTE NUEVO "
                f"y tu √öNICA MISI√ìN es que agende su primera asesor√≠a GRATUITA.\n\n"
                f"REGLAS ESTRICTAS:\n"
                f"1. Responde amablemente a sus preguntas\n"
                f"2. OBLIGATORIO: Despu√©s de CADA respuesta, debes preguntarle sobre agendar:\n"
                f"   - '¬øTe gustar√≠a agendar tu primera asesor√≠a gratuita ahora mismo?'\n"
                f"   - '¬øCu√°ndo podr√≠as tener 30 minutos para tu consulta gratuita?'\n"
                f"   - '¬øTe interesa programar una reuni√≥n sin costo para conocer nuestros servicios?'\n"
                f"3. NUNCA termines sin invitar a agendar\n"
                f"4. Si dice NO, respeta pero insiste gentilmente en el siguiente mensaje\n"
                f"5. Enfoca todos los beneficios en la asesor√≠a GRATUITA\n\n"
                f"CONTEXTO DE SERVICIOS:\n{contexto_completo}"
            )
        else:
            prompt_sistema = (
                f"Eres un asistente de soporte profesional de ITELSA IA hablando con {nombre_usuario}, "
                f"quien ya es un cliente registrado y confiable.\n\n"
                f"Tu objetivo es:\n"
                f"1. Brindar excelente soporte y informaci√≥n\n"
                f"2. Resolver todas sus dudas t√©cnicas\n"
                f"3. Ser c√°lido y profesional\n"
                f"4. SOLO agendar si √©l expresamente lo solicita\n"
                f"5. No presionar para ventas adicionales\n\n"
                f"CONTEXTO DE SERVICIOS:\n{contexto_completo}"
            )
        
        # Preparar mensajes para OpenAI
        messages = [{"role": "system", "content": prompt_sistema}]
        
        # Agregar historial de conversaci√≥n si existe
        if 'messages' in session_data:
            messages.extend(session_data['messages'])
        
        messages.append({"role": "user", "content": mensaje_usuario})
        
        # Llamar a OpenAI
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7,
            max_tokens=600
        )
        
        reply = response.choices[0].message.content
        
        # Actualizar historial de mensajes en la sesi√≥n
        if 'messages' not in session_data:
            session_data['messages'] = []
        
        session_data['messages'].append({"role": "user", "content": mensaje_usuario})
        session_data['messages'].append({"role": "assistant", "content": reply})
        
        # Mantener solo los √∫ltimos 10 mensajes para no exceder l√≠mites
        if len(session_data['messages']) > 10:
            session_data['messages'] = session_data['messages'][-10:]
        
        return reply
        
    except Exception as e:
        print(f"Error en OpenAI: {e}")
        return "Disculpa, tuve un peque√±o problema t√©cnico. ¬øPuedes repetir tu mensaje? üòä"

@app.route("/webhook", methods=["GET", "POST"])
def webhook():
    if request.method == "GET":
        # Verificaci√≥n del webhook de WhatsApp
        mode = request.args.get("hub.mode")
        token = request.args.get("hub.verify_token")
        challenge = request.args.get("hub.challenge")
        
        if mode == "subscribe" and token == WHATSAPP_VERIFY_TOKEN:
            return challenge, 200
        else:
            return "Forbidden", 403
    
    elif request.method == "POST":
        # Procesar mensaje entrante de WhatsApp
        data = request.get_json()
        
        try:
            # Extraer informaci√≥n del mensaje
            entry = data["entry"][0]
            changes = entry["changes"][0]
            value = changes["value"]
            
            if "messages" in value:
                message = value["messages"][0]
                from_number = message["from"]
                message_body = message["text"]["body"].strip()
                
                # Procesar el mensaje
                response_message = procesar_mensaje_usuario(from_number, message_body)
                
                # Enviar respuesta
                if response_message and enviar_mensaje_whatsapp(from_number, response_message):
                    print(f"Mensaje enviado a {from_number}: {response_message[:50]}...")
                else:
                    print(f"Error enviando mensaje a {from_number}")
                
        except Exception as e:
            print(f"Error procesando webhook: {e}")
        
        return jsonify({"status": "success"}), 200

def procesar_mensaje_usuario(numero_telefono, mensaje):
    """Procesa el mensaje del usuario y retorna la respuesta"""
    
    # Obtener o crear sesi√≥n del usuario
    if numero_telefono not in user_sessions:
        user_sessions[numero_telefono] = {
            'estado': 'inicial',
            'datos_usuario': {},
            'pendiente_confirmacion': {},
            'messages': []
        }
    
    session = user_sessions[numero_telefono]
    
    # Estado inicial: solicitar correo
    if session['estado'] == 'inicial':
        return "ü§ñ ¬°Hola! Soy el asistente de ITELSA IA.\nüì© Para ayudarte mejor, por favor ingresa tu correo electr√≥nico."
    
    # Validar correo electr√≥nico
    elif session['estado'] == 'inicial' and not session['datos_usuario'].get('correo'):
        if not es_correo_valido(mensaje):
            return "‚ùå El correo electr√≥nico no es v√°lido. Int√©ntalo nuevamente."
        
        correo = mensaje.strip()
        nombre_encontrado = verificar_usuario(correo)
        
        if nombre_encontrado:
            estado_asesoria = verificar_estado_asesoria_usuario(correo)
            
            session['datos_usuario'] = {
                'nombre': nombre_encontrado,
                'correo': correo,
                'es_nuevo': False
            }
            
            if estado_asesoria['tiene_rechazo'] and not estado_asesoria['tiene_cita_exitosa']:
                session['es_segunda_oportunidad'] = True
                session['estado'] = 'conversacion'
                return f"üëã ¬°Hola de nuevo, {nombre_encontrado}! Qu√© gusto verte otra vez.\n\nVeo que a√∫n no has podido aprovechar tu primera asesor√≠a gratuita con ITELSA IA. ‚ú® Las circunstancias pueden haber cambiado, ¬øte gustar√≠a agendar tu asesor√≠a gratuita ahora? Es una excelente oportunidad para que podamos ayudarte espec√≠ficamente con tus necesidades de inteligencia artificial. üöÄ\n\n¬øCu√°ndo te vendr√≠a bien programar tu consulta gratuita?"
            else:
                session['estado'] = 'conversacion'
                return f"üëã ¬°Hola de nuevo, {nombre_encontrado}! Qu√© gusto verte otra vez. ¬øEn qu√© puedo ayudarte hoy? üòä"
        else:
            session['datos_usuario']['correo'] = correo
            session['estado'] = 'recolectar_datos'
            return "‚ú® ¬°Bienvenido a ITELSA IA! Eres un usuario nuevo, vamos a registrarte.\nüë§ ¬øCu√°l es tu nombre completo?"
    
    # Recolectar datos de usuario nuevo
    elif session['estado'] == 'recolectar_datos':
        datos = session['datos_usuario']
        
        if not datos.get('nombre'):
            datos['nombre'] = mensaje.strip()
            return "üì± ¬øCu√°l es tu n√∫mero de contacto?"
        
        elif not datos.get('telefono'):
            datos['telefono'] = mensaje.strip()
            return "üíº ¬øQu√© servicio de ITELSA IA te interesa?"
        
        elif not datos.get('servicio'):
            datos['servicio'] = mensaje.strip()
            return "üìù ¬øDeseas dejar alg√∫n comentario adicional?"
        
        elif not datos.get('comentario'):
            datos['comentario'] = mensaje.strip()
            # Mostrar confirmaci√≥n
            confirmacion = f"‚úÖ Confirma tus datos:\nüë§ Nombre: {datos['nombre']}\nüìß Correo: {datos['correo']}\nüì± Tel√©fono: {datos['telefono']}\nüíº Servicio: {datos['servicio']}\nüìù Comentario: {datos['comentario']}\n\n¬øSon correctos estos datos? (s√≠/no):"
            session['estado'] = 'confirmar_datos'
            return confirmacion
    
    # Confirmar datos
    elif session['estado'] == 'confirmar_datos':
        if mensaje.lower() in ["s√≠", "si", "s"]:
            datos = session['datos_usuario']
            resultado = guardar_datos(
                datos['nombre'], 
                datos['correo'], 
                datos['telefono'], 
                datos['servicio'], 
                datos['comentario']
            )
            
            if resultado:
                session['datos_usuario']['es_nuevo'] = True
                session['estado'] = 'conversacion'
                return f"‚úÖ ¬°Datos registrados con √©xito! Ahora puedes hablar con el agente.\n\n¬°Excelente {datos['nombre']}! Ya tienes tu cuenta creada con nosotros. üéâ\n\nCu√©ntame: ¬øqu√© aspecto espec√≠fico de nuestros servicios de inteligencia artificial te interesa m√°s? ¬øAutomatizaci√≥n de procesos, an√°lisis de datos, chatbots inteligentes o consultor√≠a estrat√©gica? ü§ñ"
            else:
                return "‚ùå Error al guardar datos. Por favor, intenta nuevamente enviando tu correo electr√≥nico."
        else:
            session['estado'] = 'recolectar_datos'
            session['datos_usuario'] = {'correo': session['datos_usuario']['correo']}
            return "‚ùå Registro cancelado. Volviendo al inicio...\nüë§ ¬øCu√°l es tu nombre completo?"
    
    # Conversaci√≥n principal
    elif session['estado'] == 'conversacion':
        return procesar_conversacion_principal(session, mensaje)
    
    return "‚ùå Ha ocurrido un error. Por favor, env√≠a tu correo electr√≥nico para comenzar."

def procesar_conversacion_principal(session, mensaje):
    """Procesa la conversaci√≥n principal del usuario"""
    datos_usuario = session['datos_usuario']
    
    # Detectar intenci√≥n de agendamiento
    if detectar_solicitud_agendamiento(mensaje):
        es_segunda_oportunidad = session.get('es_segunda_oportunidad', False)
        es_usuario_nuevo = datos_usuario.get('es_nuevo', False)
        
        if es_segunda_oportunidad:
            return "¬°Qu√© excelente decisi√≥n! üåü Me alegra mucho que quieras aprovechar esta oportunidad. ¬øCu√°l ser√≠a tu fecha y hora preferida? Nuestro horario es de lunes a viernes de 8:00am a 5:00pm."
        elif es_usuario_nuevo:
            return "¬°Fant√°stico! üéâ Me emociona que quieras aprovechar tu asesor√≠a gratuita. ¬øCu√°l ser√≠a tu fecha y hora preferida? Nuestro horario es de lunes a viernes de 8:00am a 5:00pm."
        else:
            return "¬°Por supuesto! Estar√© encantado de ayudarte a agendar una nueva asesor√≠a. ¬øCu√°l ser√≠a tu fecha y hora preferida?"
    
    # Detectar rechazo de asesor√≠a
    if detectar_rechazo_asesoria(mensaje):
        es_segunda_oportunidad = session.get('es_segunda_oportunidad', False)
        
        if es_segunda_oportunidad:
            return "Lo entiendo perfectamente, respeto tu decisi√≥n. Sabes que siempre estaremos aqu√≠ cuando necesites nuestros servicios. ¬°Que tengas un excelente d√≠a! üòä"
        else:
            registrar_rechazo_asesoria(datos_usuario['correo'], "Usuario nuevo rechaz√≥ asesor√≠a gratuita")
            return "Entiendo perfectamente, no hay problema. La oferta de tu asesor√≠a gratuita seguir√° disponible cuando est√©s listo. ¬°Que tengas un excelente d√≠a! üòä"
    
    # Detectar fecha y hora en el mensaje
    fecha, hora = extraer_fecha_hora(mensaje)
    if fecha and hora:
        resultado = agendar_en_calendar(
            datos_usuario['nombre'], 
            datos_usuario['correo'], 
            datos_usuario.get('telefono', ''), 
            fecha, 
            hora
        )
        
        respuesta = generar_mensaje_amigable(
            resultado, 
            fecha, 
            hora, 
            datos_usuario['nombre'],
            session.get('es_segunda_oportunidad', False),
            datos_usuario.get('es_nuevo', False),
            datos_usuario['correo']
        )
        
        return respuesta
    
    # Usar OpenAI para respuestas generales
    return procesar_conversacion_llm(mensaje, session)

@app.route("/", methods=["GET"])
def home():
    return jsonify({
        "status": "ITELSA IA Agent is running",
        "version": "1.0.0",
        "endpoints": ["/webhook"]
    })

@app.route("/health", methods=["GET"])
def health():
    return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()})

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)